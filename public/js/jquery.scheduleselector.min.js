//!function(t){"use strict";function e(t){return t.is("[data-selected]")}function i(t,e,i){var a,s,n,r;return e.hasClass("time-slot")&&i.hasClass("time-slot")&&e.data("day")==i.data("day")?(a=t.$el.find('.time-slot[data-day="'+e.data("day")+'"]'),s=a.index(e),n=a.index(i),s>n&&(r=s,s=n,n=r),a.slice(s,n+1)):[]}function a(e){return this.each(function(){var i=t(this),a=i.data("artsy.dayScheduleSelector"),s="object"==typeof e&&e;a||i.data("artsy.dayScheduleSelector",a=new c(this,s))})}function s(e,i,a){var s=Math.ceil(n(e,i)/a);return t.map(new Array(s),function(t,i){return new Date(new Date(2e3,0,1,e.split(":")[0],e.split(":")[1]).getTime()+i*a*6e4)})}function n(t,e){return(new Date(2e3,0,1,e.split(":")[0],e.split(":")[1]).getTime()-new Date(2e3,0,1,t.split(":")[0],t.split(":")[1]).getTime())/6e4}function r(t){var e=t.getHours(),i=t.getMinutes(),a=e>=12?"pm":"am";return e+":"+("0"+i).slice(-2)+a}function l(t){var e=t.getHours(),i=t.getMinutes();return("0"+e).slice(-2)+":"+("0"+i).slice(-2)}function d(t){var e=t.split(":")[0],i=t.split(":")[1];return 60*parseInt(e,10)*60+60*parseInt(i,10)}function o(t){var e=Math.floor(t/60);return("0"+Math.floor(e/60)).slice(-2)+":"+("0"+e%60).slice(-2)}var c=function(e,i){this.$el=t(e),this.options=t.extend({},c.DEFAULTS,i),this.render(),this.
//(),this.$selectingStart=null};c.DEFAULTS={days:[0,1,2,3,4,5,6],startTime:"08:00",endTime:"20:00",interval:30,stringDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],template:'<div class="day-schedule-selector"><table class="schedule-table"><thead class="schedule-header"></thead><tbody class="schedule-rows"></tbody></table><div>'},c.prototype.render=function(){this.$el.html(this.options.template),this.renderHeader(),this.renderRows()},c.prototype.renderHeader=function(){var e=this.options.stringDays,i=this.options.days,a="";t.each(i,function(t,i){a+="<th>"+(e[t]||"")+"</th>"}),this.$el.find(".schedule-header").html("<tr><th></th>"+a+"</tr>")},c.prototype.renderRows=function(){var e=this.options.startTime,i=this.options.endTime,a=this.options.interval,n=this.options.days,d=this.$el.find(".schedule-rows");t.each(s(e,i,a),function(e,i){var a=t.map(new Array(n.length),function(t,e){return'<td class="time-slot" data-time="'+l(i)+'" data-day="'+n[e]+'"></td>'}).join();d.append('<tr><td class="time-label">'+r(i)+"</td>"+a+"</tr>")})},c.prototype.isSelecting=function(){return!!this.$selectingStart},c.prototype.select=function(t){t.attr("data-selected","selected")},c.prototype.deselect=function(t){t.removeAttr("data-selected")},c.prototype.attachEvents=function(){var a=this;this.options;this.$el.on("click",".time-slot",function(){var s=t(this).data("day");a.isSelecting()?s==a.$selectingStart.data("day")&&(a.$el.find('.time-slot[data-day="'+s+'"]').filter("[data-selecting]").attr("data-selected","selected").removeAttr("data-selecting"),a.$el.find(".time-slot").removeAttr("data-disabled"),a.$el.trigger("selected.artsy.dayScheduleSelector",[i(a,a.$selectingStart,t(this))]),a.$selectingStart=null):e(t(this))?a.deselect(t(this)):(a.$selectingStart=t(this),t(this).attr("data-selecting","selecting"),a.$el.find(".time-slot").attr("data-disabled","disabled"),a.$el.find('.time-slot[data-day="'+s+'"]').removeAttr("data-disabled"))}),this.$el.on("mouseover",".time-slot",function(){var t,e,i,s,n;if(a.isSelecting()){if(e=a.$selectingStart.data("day"),t=a.$el.find('.time-slot[data-day="'+e+'"]'),t.filter("[data-selecting]").removeAttr("data-selecting"),i=t.index(a.$selectingStart),s=t.index(this),0>s)return;i>s&&(n=i,i=s,s=n),t.slice(i,s+1).attr("data-selecting","selecting")}})},c.prototype.serialize=function(){var i=this,a={};return t.each(this.options.days,function(s,n){var r,l;r=l=!1,a[n]=[],i.$el.find(".time-slot[data-day='"+n+"']").each(function(){e(t(this))&&!r&&(r=t(this).data("time")),!e(t(this))&&r&&(l=t(this).data("time")),e(t(this))&&r&&t(this).is(".time-slot[data-day='"+n+"']:last")&&(l=o(d(t(this).data("time"))+60*i.options.interval)),l&&(a[n].push([r,l]),r=l=!1)})}),a},c.prototype.deserialize=function(e){var i,a=this;t.each(e,function(e,s){var n=a.$el.find('.time-slot[data-day="'+e+'"]');t.each(s,function(t,e){for(i=0;i<n.length&&!(n.eq(i).data("time")>=e[1]);i++)n.eq(i).data("time")>=e[0]&&a.select(n.eq(i))})})},t.fn.dayScheduleSelector=a,window.DayScheduleSelector={ssmToHhmm:o,hhmmToSsm:d}}(jQuery);


(function ($) {
  'use strict';

  var DayScheduleSelector = function (el, options) {
    this.$el = $(el);
    this.options = $.extend({}, DayScheduleSelector.DEFAULTS, options);
    this.render();
    this.attachEvents();
    this.$selectingStart = null;
  }

  DayScheduleSelector.DEFAULTS = {
    days        : [0, 1, 2, 3, 4, 5, 6],  // Sun - Sat
    startTime   : '08:00',                // HH:mm format
    endTime     : '20:00',                // HH:mm format
    interval    : 30,                     // minutes
    stringDays  : ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    template    : '<div class="day-schedule-selector">'         +
                    '<table class="schedule-table">'            +
                      '<thead class="schedule-header"></thead>' +
                      '<tbody class="schedule-rows"></tbody>'   +
                    '</table>'                                  +
                  '<div>'
  };

  /**
   * Render the calendar UI
   * @public
   */
  DayScheduleSelector.prototype.render = function () {
    this.$el.html(this.options.template);
    this.renderHeader();
    this.renderRows();
  };

  /**
   * Render the calendar header
   * @public
   */
  DayScheduleSelector.prototype.renderHeader = function () {
    var stringDays = this.options.stringDays
      , days = this.options.days
      , html = '';

    $.each(days, function (i, _) { html += '<th>' + (stringDays[i] || '') + '</th>'; });
    this.$el.find('.schedule-header').html('<tr><th></th>' + html + '</tr>');
  };

  /**
   * Render the calendar rows, including the time slots and labels
   * @public
   */
  DayScheduleSelector.prototype.renderRows = function () {
    var start = this.options.startTime
      , end = this.options.endTime
      , interval = this.options.interval
      , days = this.options.days
      , $el = this.$el.find('.schedule-rows');

    $.each(generateDates(start, end, interval), function (i, d) {
      var daysInARow = $.map(new Array(days.length), function (_, i) {
        return '<td class="time-slot" data-time="' + hhmm(d) + '" data-day="' + days[i] + '"></td>'
      }).join();

      $el.append('<tr><td class="time-label">' + hmmAmPm(d) + '</td>' + daysInARow + '</tr>');
    });
  };

  /**
   * Is the day schedule selector in selecting mode?
   * @public
   */
  DayScheduleSelector.prototype.isSelecting = function () {
    return !!this.$selectingStart;
  }

  DayScheduleSelector.prototype.select = function ($slot) { $slot.attr('data-selected', 'selected'); }
  DayScheduleSelector.prototype.deselect = function ($slot) { $slot.removeAttr('data-selected'); }

  function isSlotSelected($slot) { return $slot.is('[data-selected]'); }
  function isSlotSelecting($slot) { return $slot.is('[data-selecting]'); }

  /**
   * Get the selected time slots given a starting and a ending slot
   * @private
   * @returns {Array} An array of selected time slots
   */
  function getSelection(plugin, $a, $b) {
    var $slots, small, large, temp;
    if (!$a.hasClass('time-slot') || !$b.hasClass('time-slot') ||
        ($a.data('day') != $b.data('day'))) { return []; } //error
    $slots = plugin.$el.find('.time-slot[data-day="' + $a.data('day') + '"]'); //get all time slots within day
    small = $slots.index($a); large = $slots.index($b); //get index of smallest and largest selected slots
    if (small > large) { temp = small; small = large; large = temp; }
    return $slots.slice(small, large + 1);
  }

  DayScheduleSelector.prototype.attachEvents = function () {
    var plugin = this
      , options = this.options
      , $slots;

    this.$el.on('click', '.time-slot', function () {
      var day = $(this).data('day');
      if (!plugin.isSelecting()) {  // if we are not in selecting mode
        if (isSlotSelected($(this))) {
          plugin.deselect($(this));
          plugin.$el.trigger('selected.artsy.dayScheduleSelector');
        } else {  // then start selecting
          plugin.$selectingStart = $(this);
          $(this).attr('data-selecting', 'selecting');
          plugin.$el.find('.time-slot').attr('data-disabled', 'disabled');
          plugin.$el.find('.time-slot[data-day="' + day + '"]').removeAttr('data-disabled');
        }

      } else {  // if we are in selecting mode
        if (day == plugin.$selectingStart.data('day')) {  // if clicking on the same day column
          // then end of selection
          plugin.$el.find('.time-slot[data-day="' + day + '"]').filter('[data-selecting]')
            .attr('data-selected', 'selected').removeAttr('data-selecting');
          plugin.$el.find('.time-slot').removeAttr('data-disabled');
          //plugin.$el.trigger('selected.artsy.dayScheduleSelector', [getSelection(plugin, plugin.$selectingStart, $(this))]);
          plugin.$el.trigger('selected.artsy.dayScheduleSelector');
          plugin.$selectingStart = null;
        }
      }
    });

    this.$el.on('mouseover', '.time-slot', function () {
      var $slots, day, start, end, temp;
      if (plugin.isSelecting()) {  // if we are in selecting mode
        day = plugin.$selectingStart.data('day');
        $slots = plugin.$el.find('.time-slot[data-day="' + day + '"]');
        $slots.filter('[data-selecting]').removeAttr('data-selecting');
        start = $slots.index(plugin.$selectingStart);
        end = $slots.index(this);
        if (end < 0) return;  // not hovering on the same column
        if (start > end) { temp = start; start = end; end = temp; }
        $slots.slice(start, end + 1).attr('data-selecting', 'selecting');
      }
    });
  };

  /**
   * Serialize the selections
   * @public
   * @returns {Object} An object containing the selections of each day, e.g.
   *    {
   *      0: [],
   *      1: [["15:00", "16:30"]],
   *      2: [],
   *      3: [],
   *      5: [["09:00", "12:30"], ["15:00", "16:30"]],
   *      6: []
   *    }
   */
  DayScheduleSelector.prototype.serialize = function () {
    var plugin = this
      , selections = {};

    $.each(this.options.days, function (_, v) {
      var start, end;
      start = end = false; selections[v] = [];
      plugin.$el.find(".time-slot[data-day='" + v + "']").each(function () {
        // Start of selection
        if (isSlotSelected($(this)) && !start) {
          start = $(this).data('time');
        }

        // End of selection (I am not selected, so select until my previous one.)
        if (!isSlotSelected($(this)) && !!start) {
          end = $(this).data('time');
        }

        // End of selection (I am the last one :) .)
        if (isSlotSelected($(this)) && !!start && $(this).is(".time-slot[data-day='" + v + "']:last")) {
          end = secondsSinceMidnightToHhmm(
            hhmmToSecondsSinceMidnight($(this).data('time')) + plugin.options.interval * 60);
        }

        if (!!end) { selections[v].push([start, end]); start = end = false; }
      });
    })
    return selections;
  };

  /**
   * Deserialize the schedule and render on the UI
   * @public
   * @param {Object} schedule An object containing the schedule of each day, e.g.
   *    {
   *      0: [],
   *      1: [["15:00", "16:30"]],
   *      2: [],
   *      3: [],
   *      5: [["09:00", "12:30"], ["15:00", "16:30"]],
   *      6: []
   *    }
   */
  DayScheduleSelector.prototype.deserialize = function (schedule) {
    var plugin = this, i;
    $.each(schedule, function(d, ds) {
      var $slots = plugin.$el.find('.time-slot[data-day="' + d + '"]');
      $.each(ds, function(_, s) {
        for (i = 0; i < $slots.length; i++) {
          if ($slots.eq(i).data('time') >= s[1]) { break; }
          if ($slots.eq(i).data('time') >= s[0]) { plugin.select($slots.eq(i)); }
        }
      })
    });
  };

  // DayScheduleSelector Plugin Definition
  // =====================================

  function Plugin(option) {
    return this.each(function (){
      var $this   = $(this)
        , data    = $this.data('artsy.dayScheduleSelector')
        , options = typeof option == 'object' && option;

      if (!data) {
        $this.data('artsy.dayScheduleSelector', (data = new DayScheduleSelector(this, options)));
      }
    })
  }

  $.fn.dayScheduleSelector = Plugin;

  /**
   * Generate Date objects for each time slot in a day
   * @private
   * @param {String} start Start time in HH:mm format, e.g. "08:00"
   * @param {String} end End time in HH:mm format, e.g. "21:00"
   * @param {Number} interval Interval of each time slot in minutes, e.g. 30 (minutes)
   * @returns {Array} An array of Date objects representing the start time of the time slots
   */
  function generateDates(start, end, interval) {
    var numOfRows = Math.ceil(timeDiff(start, end) / interval);
    return $.map(new Array(numOfRows), function (_, i) {
      // need a dummy date to utilize the Date object
      return new Date(new Date(2000, 0, 1, start.split(':')[0], start.split(':')[1]).getTime() + i * interval * 60000);
    });
  }

  /**
   * Return time difference in minutes
   * @private
   */
  function timeDiff(start, end) {   // time in HH:mm format
    // need a dummy date to utilize the Date object
    return (new Date(2000, 0, 1, end.split(':')[0], end.split(':')[1]).getTime() -
            new Date(2000, 0, 1, start.split(':')[0], start.split(':')[1]).getTime()) / 60000;
  }

  /**
   * Convert a Date object to time in H:mm format with am/pm
   * @private
   * @returns {String} Time in H:mm format with am/pm, e.g. '9:30am'
   */
  function hmmAmPm(date) {
    var hours = date.getHours()
      , minutes = date.getMinutes()
      , ampm = hours >= 12 ? 'pm' : 'am';
    return hours + ':' + ('0' + minutes).slice(-2) + ampm;
  }

  /**
   * Convert a Date object to time in HH:mm format
   * @private
   * @returns {String} Time in HH:mm format, e.g. '09:30'
   */
  function hhmm(date) {
    var hours = date.getHours()
      , minutes = date.getMinutes();
    return ('0' + hours).slice(-2) + ':' + ('0' + minutes).slice(-2);
  }

  function hhmmToSecondsSinceMidnight(hhmm) {
    var h = hhmm.split(':')[0]
      , m = hhmm.split(':')[1];
    return parseInt(h, 10) * 60 * 60 + parseInt(m, 10) * 60;
  }

  /**
   * Convert seconds since midnight to HH:mm string, and simply
   * ignore the seconds.
   */
  function secondsSinceMidnightToHhmm(seconds) {
    var minutes = Math.floor(seconds / 60);
    return ('0' + Math.floor(minutes / 60)).slice(-2) + ':' +
           ('0' + (minutes % 60)).slice(-2);
  }

  // Expose some utility functions
  window.DayScheduleSelector = {
    ssmToHhmm: secondsSinceMidnightToHhmm,
    hhmmToSsm: hhmmToSecondsSinceMidnight
  };

})(jQuery);
